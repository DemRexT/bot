package bot

import (
	"context"
	"fmt"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"log"
	"strconv"
	"strings"
)

const AdminChatID = -4732218051

func StartHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", CallbackData: "role_1"},
				{Text: "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", CallbackData: "role_2"},
			},
		},
	}

	if update.CallbackQuery != nil && update.CallbackQuery.Data == "start" {
		_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			ShowAlert:       false,
		})
		if err != nil {
			return
		}

		// –í—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è /start
		_, err = b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      update.CallbackQuery.Message.Message.Chat.ID,
			Text:        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å",
			ReplyMarkup: kb,
		})
		if err != nil {
			return
		}
	} else {
		_, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      update.Message.Chat.ID,
			Text:        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å",
			ReplyMarkup: kb,
		})
		if err != nil {
			fmt.Println(fmt.Errorf("%v", err))
			return
		}
	}

}

func CallbackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {

	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		ShowAlert:       false,
	})
	if err != nil {
		log.Printf("Error answering callback: %v", err)
		return
	}

	var response string
	var kb *models.InlineKeyboardMarkup
	switch update.CallbackQuery.Data {
	case "role_1":
		response = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:\n‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ EAZZY ‚Äî —Å–µ—Ä–≤–∏—Å –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–≥–æ –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥–∞!\n\n‚úîÔ∏è " +
			"–í–æ–∑—å–º–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–±—è –∫–∞–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å-–ø–∞—Ä—Ç–Ω—ë—Ä\n‚úîÔ∏è " +
			"–ü–æ–¥–±–µ—Ä–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –æ–±—É—á–∞–µ–º –∏—Ö –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º.\n‚úîÔ∏è " +
			"–ü—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏ –æ—Ç–¥–∞–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–∂–∏–¥–∞–Ω–∏—è–º\n\n" +
			"–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è\nüöÄ –ü–æ–≥–Ω–∞–ª–∏!\n"
		kb = &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{Text: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", CallbackData: "register_Business"},
				},
			},
		}
	case "role_2":
		response = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:\n‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ EAZZY ‚Äî —Å–µ—Ä–≤–∏—Å –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–≥–æ –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥–∞!\n\n‚úîÔ∏è " +
			"–ü–æ–º–æ–∂–µ–º —Ç–µ–±–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–ø–∏—Å–∞—Ç—å —Ç–≤–æ–∏ —É–º–µ–Ω–∏—è –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∏—Ö –≤ –¥–æ—Ö–æ–¥\n‚úîÔ∏è " +
			"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏ —á–µ—Å—Ç–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n‚úîÔ∏è " +
			"–î–∞–¥–∏–º —Å—Ç–∞—Ä—Ç —Ç–≤–æ–µ–π –∫–∞—Ä—å–µ—Ä–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–º –∏ –ø–æ–º–æ–∂–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ\n\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è\nüöÄ –ü–æ–≥–Ω–∞–ª–∏!"
		kb = &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{Text: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", CallbackData: "register_Teen"},
				},
			},
		}
	default:
		response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + update.CallbackQuery.Data
	}

	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.CallbackQuery.Message.Message.Chat.ID,
		Text:        response,
		ReplyMarkup: kb,
	})
	if err != nil {
		log.Printf("Error sending response: %v", err)
	}
}

func Register(ctx context.Context, b *bot.Bot, update *models.Update) {
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		ShowAlert:       false,
	})
	if err != nil {
		log.Printf("Error answering callback: %v", err)
		return
	}

	var response string
	switch update.CallbackQuery.Data {
	case "register_Business":

		response = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞"

	case "register_Teen":
		response = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"

	default:
		response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + update.CallbackQuery.Data
	}

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", CallbackData: "submit_for_moderation_" + update.CallbackQuery.Data},
			},
		},
	}

	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.CallbackQuery.Message.Message.Chat.ID,
		Text:        response,
		ReplyMarkup: kb,
	})
	if err != nil {
		log.Printf("Error sending response: %v", err)
	}
}

func Moderation(ctx context.Context, b *bot.Bot, update *models.Update) {

	userID := update.CallbackQuery.Message.Message.Chat.ID
	parts := strings.Split(update.CallbackQuery.Data, "_")

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text:         "–ü—Ä–∏–Ω—è—Ç—å",
					CallbackData: "action_accept_" + strconv.FormatInt(userID, 10) + "_" + parts[4],
				},
			},
			{
				{
					Text:         "–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
					CallbackData: "action_reject_" + strconv.FormatInt(userID, 10) + "_" + parts[4],
				},
			},
		},
	}
	var response string
	switch parts[4] {
	case "Business":

		response = "–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞"

	case "Teen":
		response = "–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"

	default:

		response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + update.CallbackQuery.Data
	}

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      AdminChatID,
		Text:        response,
		ReplyMarkup: kb,
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func ModerationResponse(ctx context.Context, b *bot.Bot, update *models.Update) {
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		ShowAlert:       false,
	})
	if err != nil {
		log.Printf("Error answering callback: %v", err)
		return
	}
	parts := strings.Split(update.CallbackQuery.Data, "_")

	actionID, err := strconv.Atoi(parts[2])
	if err != nil {
		log.Printf("–ü—Ä–æ–±–ª–µ–º–∞ —Å ID: %v", err)
		return
	}

	//"action_reject_" + strconv.FormatInt(userID, 10) + "_" + parts[4]
	var kb *models.InlineKeyboardMarkup
	var response string
	switch parts[1] {
	case "reject":

		response = "–ó–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é(\n\n" +
			"–ë—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n" +
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Å—å –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É –∏ –ø—Ä–æ–≤–µ—Ä—å, –Ω–µ –¥–æ–ø—É—â–µ–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞"

		kb = &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{
						Text:         "–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥",
						CallbackData: "start",
					},
				},
			},
		}
	case "accept":
		switch parts[3] {
		case "Business":
			response = "–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞!\n\n–•–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ?"
			kb = &models.InlineKeyboardMarkup{
				InlineKeyboard: [][]models.InlineKeyboardButton{
					{
						{
							Text:         "–î–∞",
							CallbackData: "create_task",
						},
						{
							Text:         "–ü–æ–∑–∂–µ",
							CallbackData: "later",
						},
					},
				},
			}
		case "Teen":
			response = "–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!\n\n–ü–æ—Å–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –¥–ª—è —Ç–µ–±—è –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ?"
			kb = &models.InlineKeyboardMarkup{
				InlineKeyboard: [][]models.InlineKeyboardButton{
					{
						{
							Text:         "–ü–æ—Å–º–æ—Ç—Ä–∏–º",
							CallbackData: "view_tasks",
						},
					},
				},
			}
		}

	default:
		response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + update.CallbackQuery.Data
	}

	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      actionID,
		Text:        response,
		ReplyMarkup: kb,
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

}

func ViewTasks(ctx context.Context, b *bot.Bot, update *models.Update) {
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		ShowAlert:       false,
	})
	if err != nil {
		log.Printf("%v", err)
		return
	}
	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "–ì–æ—Ç–æ–≤", CallbackData: "ready_yes"},
				{Text: "–ù–µ –≥–æ—Ç–æ–≤", CallbackData: "ready_not"},
			},
		},
	}

	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.CallbackQuery.Message.Message.Chat.ID,
		Text: "–£ –Ω–∞—Å –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è –∑–∞–¥–∞–Ω–∏–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞. –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –∑–∞–¥–∞–Ω–∏–µ–º.\n" +
			"–°—Ä–æ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è - –¥–æ –ß–ß.–ú–ú –î–î.–ú–ú\n" +
			"–ü—Ä–∏—à–ª–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –ø–æ–ª–µ —ç—Ç–æ–≥–æ —Å—Ä–æ–∫–∞ –∏ —É—Ç–æ—á–Ω–∏–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.\n" +
			"–ò –ø–æ–º–Ω–∏: –º—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ –∑–∞ —Ç–µ–±—è,\n–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º –∏ –ø–æ–¥—Å–∫–∞–∂–µ–º,\n" +
			"–µ—Å–ª–∏ –±—É–¥–µ—Ç —Ç—Ä—É–¥–Ω–æ –∏–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ!",
		ReplyMarkup: kb,
	})
	if err != nil {
		log.Printf("%v", err)
	}

}

func StudentReadiness(ctx context.Context, b *bot.Bot, update *models.Update) {
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		ShowAlert:       false,
	})
	if err != nil {
		log.Printf("%v", err)
	}

	var response string
	var kb *models.InlineKeyboardMarkup
	switch update.CallbackQuery.Data {
	case "ready_yes":
		response = "–û—Ç–ª–∏—á–Ω–æ!\n–î–∞–≤–∞–π –Ω–∞–∑–Ω–∞—á–∏–º —Å–æ–∑–≤–æ–Ω —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º –¥–ª—è–≤—ã—è—Å–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π,–∑–∞—Ç–µ–º —Ç—ã —Å–º–æ–∂–µ—à –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å"
		kb = &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{Text: "–û–∫–µ–π", CallbackData: "call"},
				},
			},
		}
	case "ready_not":
		response = "–ü–æ–¥—Å–∫–∞–∂–∏, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ:"
		kb = &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{Text: "–µ—â–µ –∑–∞–Ω—è—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–µ–π", CallbackData: "not_busy"},
				},
				{
					{Text: "–∑–∞–¥–∞—á–∞ –º–Ω–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞", CallbackData: "not_interesting"},
				},
				{
					{Text: "–Ω–µ –ø–æ–Ω—è–ª –∑–∞–¥–∞–Ω–∏–µ –∏/–∏–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Å–ø—Ä–∞–≤–ª—é—Å—å", CallbackData: "not_understand"},
				},
			},
		}
	default:
		response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + update.CallbackQuery.Data
	}

	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.CallbackQuery.Message.Message.Chat.ID,
		Text:        response,
		ReplyMarkup: kb,
	})
	if err != nil {
		log.Printf("%v", err)
	}
}

func Call(ctx context.Context, b *bot.Bot, update *models.Update) {
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		ShowAlert:       false,
	})
	if err != nil {
		log.Printf("%v", err)
	}

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "–ì–æ—Ç–æ–≤–æ", CallbackData: "_"},
			},
		},
	}

	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.CallbackQuery.Message.Message.Chat.ID,
		Text:        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞–∑–Ω–∞—á–∏–º —Å–æ–∑–≤–æ–Ω",
		ReplyMarkup: kb,
	})
	if err != nil {
		log.Printf("%v", err)
	}

	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: AdminChatID,
		Text:   "–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—ã–π —Å–æ–∑–≤–æ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
	})
	if err != nil {
		log.Printf("%v", err)
	}

}

func NotReady(ctx context.Context, b *bot.Bot, update *models.Update) {
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		ShowAlert:       false,
	})
	if err != nil {
		log.Printf("%v", err)
	}

	parts := strings.Split(update.CallbackQuery.Data, "_")
	var kb *models.InlineKeyboardMarkup
	var response string
	switch parts[1] {
	case "busy":
		response = "–•–æ—á–µ—à—å –≤–∑—è—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ?"
		kb = &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{Text: "–î–∞", CallbackData: "call_you"},
					{Text: "–ù–µ—Ç", CallbackData: "following_tasks"},
				},
			},
		}
	case "interesting":
		response = "–ë–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∑–∞–¥–∞—á–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞?"
		kb = &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{Text: "–î–∞, –Ω–µ –º–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", CallbackData: "_"},
					{Text: "–ù–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–≥–∏–µ, –Ω–µ –∑–∞—à–ª–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ", CallbackData: "_"},
				},
			},
		}
	case "understand":
		response = "–•–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å \\–±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ?"
		kb = &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{Text: "–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞  (—Å–≤—è–∑—å –≤ –ª–∏—á–∫–µ –∏–ª–∏ —Å–æ–∑–≤–æ–Ω)", CallbackData: "call_you"},
					{Text: "–Ω–µ—Ç, —Å–ø–∞—Å–∏–±–æ", CallbackData: "following_tasks"},
				},
			},
		}
	default:
		response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + update.CallbackQuery.Data
	}

	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.CallbackQuery.Message.Message.Chat.ID,
		Text:        response,
		ReplyMarkup: kb,
	})
	if err != nil {
		log.Printf("%v", err)
		log.Printf("%v", update.CallbackQuery.Data)
	}
}
